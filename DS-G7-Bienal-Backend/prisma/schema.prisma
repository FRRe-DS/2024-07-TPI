generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, createdAt])
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  lastname    String
  email       String    @unique
  password    String
  phoneNumber String?
  dni         String    @unique
  role        Role      @default(VISITANTE)
  sculptor    Sculptor?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tokens      Token[] 
  votes Vote[] 
}

model Sculptor {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  scultures Sculpture[]
  obrasPrevias String?
  biografia    String?
  qr           String?
}


enum Role {
  ESCULTOR
  ADMIN
  VISITANTE
}

model Tematic {
  id Int @id @default(autoincrement())
  name String @unique
  events Event[]
}

model Event {
  id Int  @id @default(autoincrement())
  tematicId Int
  uuid String @unique @default(uuid())
  name String 
  dateStart DateTime
  dateEnd   DateTime
  lugar     String
  descripcion String
  sculptures Sculpture[]
  tematic Tematic @relation(fields:[tematicId], references: [id])
}

model Sculpture {
  id Int  @id @default(autoincrement())
  uuid String @unique @default(uuid())
  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sculptorId Int
  sculptor Sculptor @relation(fields: [sculptorId], references: [userId], onDelete: Cascade)
  name String
  description String
  createdAt DateTime  @default(now())
  qr String?
  images Image[]
  votes Vote[]
}

model Image {
  id Int @unique @default(autoincrement())
  url String
  sculptureId Int
  sculpture Sculpture @relation(fields: [sculptureId], references: [id], onDelete: Cascade)
}

model Vote {
  id           Int      @id @default(autoincrement())
  sculptureId  Int
  sculpture    Sculpture @relation(fields: [sculptureId], references: [id], onDelete: Cascade)

  userId       Int     
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  calification Int

  @@unique([userId, sculptureId]) 
}
